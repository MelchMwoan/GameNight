// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SQLData;

#nullable disable

namespace SQLData.Migrations
{
    [DbContext(typeof(GameNightDbContext))]
    [Migration("20231023173043_Remove key")]
    partial class Removekey
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("HouseNumber")
                        .HasColumnType("int");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("Domain.Game", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Genre")
                        .HasColumnType("int");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Is18Plus")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("NightId")
                        .HasColumnType("int");

                    b.Property<int?>("PersonId")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("NightId");

                    b.HasIndex("PersonId");

                    b.ToTable("Games");
                });

            modelBuilder.Entity("Domain.Night", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("AdultOnly")
                        .HasColumnType("bit");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MaxPlayers")
                        .HasColumnType("int");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<bool>("TakeOwnSnacks")
                        .HasColumnType("bit");

                    b.Property<string>("ThumbnailUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.ToTable("Nights");
                });

            modelBuilder.Entity("Domain.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RealName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isAlcoholFree")
                        .HasColumnType("bit");

                    b.Property<bool>("isGlutenFree")
                        .HasColumnType("bit");

                    b.Property<bool>("isLactoseFree")
                        .HasColumnType("bit");

                    b.Property<bool>("isNutsFree")
                        .HasColumnType("bit");

                    b.Property<bool>("isVegan")
                        .HasColumnType("bit");

                    b.Property<bool>("isVegatarian")
                        .HasColumnType("bit");

                    b.Property<string>("pfpUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.ToTable("Persons");
                });

            modelBuilder.Entity("Domain.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Rating")
                        .HasColumnType("float");

                    b.Property<int>("nightId")
                        .HasColumnType("int");

                    b.Property<int>("organisatorId")
                        .HasColumnType("int");

                    b.Property<int>("writerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("nightId");

                    b.HasIndex("organisatorId");

                    b.HasIndex("writerId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("Domain.Snack", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isAlcoholFree")
                        .HasColumnType("bit");

                    b.Property<bool>("isGlutenFree")
                        .HasColumnType("bit");

                    b.Property<bool>("isLactoseFree")
                        .HasColumnType("bit");

                    b.Property<bool>("isNutsFree")
                        .HasColumnType("bit");

                    b.Property<bool>("isVegan")
                        .HasColumnType("bit");

                    b.Property<bool>("isVegatarian")
                        .HasColumnType("bit");

                    b.Property<int?>("nightId")
                        .HasColumnType("int");

                    b.Property<int>("personId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("nightId");

                    b.HasIndex("personId");

                    b.ToTable("Snacks");
                });

            modelBuilder.Entity("NightPerson", b =>
                {
                    b.Property<int>("NightsId")
                        .HasColumnType("int");

                    b.Property<int>("PlayersId")
                        .HasColumnType("int");

                    b.HasKey("NightsId", "PlayersId");

                    b.HasIndex("PlayersId");

                    b.ToTable("NightPerson");
                });

            modelBuilder.Entity("Domain.Game", b =>
                {
                    b.HasOne("Domain.Night", null)
                        .WithMany("Games")
                        .HasForeignKey("NightId");

                    b.HasOne("Domain.Person", null)
                        .WithMany("Games")
                        .HasForeignKey("PersonId");
                });

            modelBuilder.Entity("Domain.Night", b =>
                {
                    b.HasOne("Domain.Person", "Organisator")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .IsRequired();

                    b.Navigation("Organisator");
                });

            modelBuilder.Entity("Domain.Person", b =>
                {
                    b.HasOne("Domain.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");
                });

            modelBuilder.Entity("Domain.Review", b =>
                {
                    b.HasOne("Domain.Night", "night")
                        .WithMany("Reviews")
                        .HasForeignKey("nightId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Person", "Organisator")
                        .WithMany()
                        .HasForeignKey("organisatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Person", "Writer")
                        .WithMany()
                        .HasForeignKey("writerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organisator");

                    b.Navigation("Writer");

                    b.Navigation("night");
                });

            modelBuilder.Entity("Domain.Snack", b =>
                {
                    b.HasOne("Domain.Night", "night")
                        .WithMany("Snacks")
                        .HasForeignKey("nightId");

                    b.HasOne("Domain.Person", "person")
                        .WithMany()
                        .HasForeignKey("personId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("night");

                    b.Navigation("person");
                });

            modelBuilder.Entity("NightPerson", b =>
                {
                    b.HasOne("Domain.Night", null)
                        .WithMany()
                        .HasForeignKey("NightsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Person", null)
                        .WithMany()
                        .HasForeignKey("PlayersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Night", b =>
                {
                    b.Navigation("Games");

                    b.Navigation("Reviews");

                    b.Navigation("Snacks");
                });

            modelBuilder.Entity("Domain.Person", b =>
                {
                    b.Navigation("Games");
                });
#pragma warning restore 612, 618
        }
    }
}
